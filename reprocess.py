#!/usr/bin/env python3
"""
reprocess.py - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡πÅ‡∏õ‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Selective Retranslation + Git Versioning
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ glossary ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏ó‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡πÑ‡∏´‡∏°
"""

import os
import re
import json
import subprocess
import datetime
from typing import Dict, List, Set
import argparse


# ---------------------------
# Configuration
# ---------------------------
SRC_DIR = "chapters_src"
OUT_DIR = "chapters_translated"
LOG_DIR = "logs"
GLOSSARY_FILE = "glossary.yaml"
META_DIR = os.path.join(OUT_DIR, ".meta")

os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(META_DIR, exist_ok=True)


# ---------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ git ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á glossary ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
# ---------------------------
def has_glossary_changed_since(commit_ref: str) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ glossary.yaml ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà commit ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        result = subprocess.run(
            ["git", "diff", "--name-only", commit_ref, "HEAD", GLOSSARY_FILE],
            capture_output=True, text=True
        )
        return bool(result.stdout.strip())
    except Exception:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ git ‡∏´‡∏£‡∏∑‡∏≠ error ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (safe mode)
        print("[WARNING] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git diff ‡πÑ‡∏î‡πâ ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")
        return True


# ---------------------------
# ‡πÇ‡∏´‡∏•‡∏î metadata ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó
# ---------------------------
def load_chapter_metadata(chapter_name: str) -> dict:
    meta_path = os.path.join(META_DIR, f"{chapter_name}.json")
    if os.path.exists(meta_path):
        with open(meta_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_chapter_metadata(chapter_name: str, data: dict):
    meta_path = os.path.join(META_DIR, f"{chapter_name}.json")
    with open(meta_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# ---------------------------
# ‡πÇ‡∏´‡∏•‡∏î glossary ‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏≤‡∏Å commit ‡πÄ‡∏î‡∏¥‡∏°
# ---------------------------
def load_current_glossary() -> Dict[str, str]:
    if not os.path.exists(GLOSSARY_FILE):
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö {GLOSSARY_FILE}")

    with open(GLOSSARY_FILE, "r", encoding="utf-8") as f:
        data = yaml.safe_load(f) or {}
        return {
            k: v["th"] if isinstance(v, dict) and "th" in v else v
            for k, v in data.items()
            if isinstance(v, (dict, str))
        }


def load_glossary_at_commit(commit: str) -> Dict[str, str]:
    """‡πÇ‡∏´‡∏•‡∏î glossary.yaml ‡∏à‡∏≤‡∏Å commit ‡πÄ‡∏Å‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô git show"""
    try:
        result = subprocess.run(
            ["git", "show", f"{commit}:{GLOSSARY_FILE}"],
            capture_output=True, text=True, encoding="utf-8"
        )
        if result.returncode != 0:
            print(f"[ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î glossary ‡∏à‡∏≤‡∏Å commit {commit}")
            return {}

        from io import StringIO
        data = yaml.safe_load(StringIO(result.stdout)) or {}
        return {
            k: v["th"] if isinstance(v, dict) and "th" in v else v
            for k, v in data.items()
            if isinstance(v, (dict, str))
        }
    except Exception as e:
        print(f"[ERROR] ‡πÇ‡∏´‡∏•‡∏î glossary ‡∏à‡∏≤‡∏Å git ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return {}


# ---------------------------
# ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
# ---------------------------
def find_changed_terms(old: Dict[str, str], new: Dict[str, str]) -> Set[str]:
    changed = set()
    all_keys = set(old.keys()) | set(new.keys())
    for k in all_keys:
        if old.get(k) != new.get(k):
            changed.add(k)
    return changed


# ---------------------------
# ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
# ---------------------------
def split_to_sentences(text: str) -> List[str]:
    sentences = re.split(r'(?<=[„ÄÇÔºÅÔºü;Ôºõ!?])\s*', text)
    return [s.strip() for s in sentences if s.strip()]


# ---------------------------
# ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GPT ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏°)
# ---------------------------
def translate_sentence_with_glossary(sentence: str, glossary: Dict[str, str]) -> str:
    result = sentence
    sorted_items = sorted(glossary.items(), key=lambda x: len(x[0]), reverse=True)
    for hanzi, thai in sorted_items:
        result = result.replace(hanzi, thai)
    return result


# ---------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡πÄ‡∏î‡∏¥‡∏°
# ---------------------------
def load_chinese_source(chapter_path: str) -> str:
    if not os.path.exists(chapter_path):
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {chapter_path}")
    with open(chapter_path, "r", encoding="utf-8") as f:
        return f.read().strip()


def load_translation(chapter_name: str) -> str:
    path = os.path.join(OUT_DIR, f"{chapter_name}_translated.txt")
    if not os.path.exists(path):
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡πÅ‡∏õ‡∏•‡πÄ‡∏î‡∏¥‡∏°: {path}")
    with open(path, "r", encoding="utf-8") as f:
        return f.read()


# ---------------------------
# Reprocess ‡∏ö‡∏ó‡πÅ‡∏õ‡∏•‡πÄ‡∏î‡∏¥‡∏°
# ---------------------------
def reprocess_chapter(chapter_path: str):
    chapter_name = os.path.splitext(os.path.basename(chapter_path))[0]
    print(f"[INFO] üîç ‡πÄ‡∏£‡∏¥‡πà‡∏° reprocess ‡∏ö‡∏ó: {chapter_name}")

    # 1. ‡πÇ‡∏´‡∏•‡∏î metadata
    meta = load_chapter_metadata(chapter_name)
    last_processed_commit = meta.get("last_glossary_commit")

    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ git repository ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
    if not os.path.exists(".git"):
        print("[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏û‡∏≠ git ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ 'git init' ‡∏Å‡πà‡∏≠‡∏ô")
        return

    # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ glossary ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if last_processed_commit:
        if not has_glossary_changed_since(last_processed_commit):
            print("[INFO] üü¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô glossary ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
            return
        print(f"[INFO] üîÑ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á glossary ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà commit {last_processed_commit[:8]}")
    else:
        print("[INFO] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á reprocess")

    # 4. ‡πÇ‡∏´‡∏•‡∏î glossary ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
    current_glossary = load_current_glossary()
    old_glossary = load_glossary_at_commit(last_processed_commit) if last_processed_commit else {}

    if not old_glossary:
        print("[INFO] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î glossary ‡πÄ‡∏Å‡πà‡∏≤ ‚Üí ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà")
        old_glossary = {}

    # 5. ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    changed_terms = find_changed_terms(old_glossary, current_glossary)
    if not changed_terms:
        print("[INFO] üü° ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏®‡∏±‡∏û‡∏ó‡πå ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï metadata ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        meta["last_glossary_commit"] = get_current_commit_hash()
        meta["updated_at"] = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        save_chapter_metadata(chapter_name, meta)
        return

    print(f"[CHANGE] üîß ‡∏û‡∏ö {len(changed_terms)} ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: {sorted(changed_terms)}")

    # 6. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try:
        src_text = load_chinese_source(chapter_path)
        old_thai = load_translation(chapter_name)
    except Exception as e:
        print(f"[ERROR] ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return

    # 7. ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
    chinese_sentences = split_to_sentences(src_text)
    thai_sentences = split_to_sentences(old_thai)

    # 8. ‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    new_thai_parts = []
    updated_count = 0

    for i, zh_sent in enumerate(chinese_sentences):
        if any(term in zh_sent for term in changed_terms):
            new_sent = translate_sentence_with_glossary(zh_sent, current_glossary)
            new_thai_parts.append(new_sent)
            updated_count += 1
            print(f"  [UPDATE] ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ {i+1}: {zh_sent[:30]}... ‚Üí {new_sent[:40]}...")
        else:
            new_thai_parts.append(thai_sentences[i] if i < len(thai_sentences) else "")

    # 9. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡πÉ‡∏´‡∏°‡πà
    output_path = os.path.join(OUT_DIR, f"{chapter_name}_translated_updated.txt")
    with open(output_path, "w", encoding="utf-8") as f:
        f.write("\n".join(new_thai_parts))

    # 10. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï metadata
    meta["last_glossary_commit"] = get_current_commit_hash()
    meta["glossary_changes_applied"] = sorted(list(changed_terms))
    meta["sentences_updated"] = updated_count
    meta["updated_at"] = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    save_chapter_metadata(chapter_name, meta)

    # 11. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    print(f"[SUCCESS] ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {output_path}")
    print(f"  - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {updated_count} ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ")
    print(f"  - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å metadata ‡∏ó‡∏µ‡πà: {os.path.join(META_DIR, f'{chapter_name}.json')}")


# ---------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢: ‡∏î‡∏∂‡∏á commit hash ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
# ---------------------------
def get_current_commit_hash() -> str:
    try:
        result = subprocess.run(
            ["git", "rev-parse", "HEAD"],
            capture_output=True, text=True
        )
        return result.stdout.strip()
    except Exception:
        return "unknown"


# ---------------------------
# CLI
# ---------------------------
if __name__ == "__main__":
    import yaml  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏á import ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á global scope

    parser = argparse.ArgumentParser(description="üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡πÅ‡∏õ‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á glossary (‡πÉ‡∏ä‡πâ Git)")
    parser.add_argument("chapter", help="‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô chapters_src/sa_0001.txt")

    args = parser.parse_args()
    reprocess_chapter(args.chapter)