#!/usr/bin/env python3
"""
glossary_editor.py - GUI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç glossary.yaml + ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô/‡∏ö‡∏ó
‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Flet 0.28.3+
"""

import flet as ft
import yaml
import os
import subprocess
import datetime


# ---------------------------
# Configuration
# ---------------------------
GLOSSARY_FILE = "glossary.yaml"
APP_TITLE = "üìñ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÑ‡∏ã‡πà‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô"


# ---------------------------
# ‡∏≠‡πà‡∏≤‡∏ô glossary.yaml + ‡πÄ‡∏Å‡πá‡∏ö metadata
# ---------------------------
original_glossary_metadata = {}

def load_glossary():
    global original_glossary_metadata
    if not os.path.exists(GLOSSARY_FILE):
        return {}
    
    with open(GLOSSARY_FILE, "r", encoding="utf-8") as f:
        try:
            data = yaml.safe_load(f) or {}
            simple = {}
            original_glossary_metadata.clear()
            for k, v in data.items():
                if isinstance(v, dict):
                    simple[k] = v["th"]
                    original_glossary_metadata[k] = {
                        "added_at": v.get("added_at", ""),
                        "chapter_first_seen": v.get("chapter_first_seen"),
                        "source_type": v.get("source_type")
                    }
                elif isinstance(v, str):
                    simple[k] = v
                    original_glossary_metadata[k] = {
                        "added_at": "",
                        "chapter_first_seen": None,
                        "source_type": "auto"
                    }
            return simple
        except Exception as e:
            print(f"Error loading glossary: {e}")
            return {}


# ---------------------------
# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å glossary.yaml (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°)
# ---------------------------
def save_glossary( dict):
    full_data = {}
    now = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    for hanzi, thai in data.items():
        if hanzi in full_data:
            if isinstance(full_data[hanzi], dict):
                full_data[hanzi]["th"] = thai
                full_data[hanzi]["added_at"] = now
            else:
                full_data[hanzi] = {
                    "th": thai,
                    "source_type": "manual",
                    "added_at": now,
                    "notes": ""
                }
        else:
            full_data[hanzi] = {
                "th": thai,
                "source_type": "manual",
                "added_at": now,
                "notes": ""
            }

    with open(GLOSSARY_FILE, "w", encoding="utf-8") as f:
        yaml.dump(full_data, f, allow_unicode=True, sort_keys=False, indent=2)


# ---------------------------
# Git Commit ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
# ---------------------------
def git_commit_changes():
    try:
        result = subprocess.run(["git", "rev-parse", "--is-inside-work-tree"], 
                                capture_output=True, text=True)
        if result.returncode != 0:
            return False, "‡πÑ‡∏°‡πà‡∏û‡∏ö Git repository"

        subprocess.run(["git", "add", GLOSSARY_FILE], check=True)
        msg = f"üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï glossary ‡∏à‡∏≤‡∏Å GUI: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}"
        subprocess.run(["git", "commit", "-m", msg], check=True)
        return True, "‚úÖ Git commit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"
    except subprocess.CalledProcessError as e:
        return False, f"‚ùå Git error: {str(e)}"
    except Exception as e:
        return False, f"‚ùå Error: {str(e)}"


# ---------------------------
# Main UI
# ---------------------------
def main(page: ft.Page):
    page.title = APP_TITLE
    page.theme_mode = ft.ThemeMode.LIGHT
    page.padding = 20
    page.window_width = 1200
    page.window_height = 800
    page.scroll = "auto"

    # --- ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡πà‡∏≠‡∏ô ---
    page.edit_container = ft.Column(spacing=5)
    entries = []
    visible_rows = []

    # --- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    original_glossary = load_glossary()

    # --- ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ---
    search_field = ft.TextField(
        label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå",
        width=250,
        dense=True,
        on_change=lambda e: filter_entries(),
    )

    # --- ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ---
    date_picker = ft.DatePicker(
        on_change=lambda e: update_date_label_and_filter(),
        on_dismiss=lambda e: print("‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô")
    )
    page.overlay.append(date_picker)

    def update_date_label_and_filter():
        if date_picker.value:
            selected_date.value = date_picker.value.strftime("%Y-%m-%d")
        else:
            selected_date.value = "‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô"
        filter_entries()

    date_button = ft.ElevatedButton(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô",
        icon=ft.Icons.CALENDAR_TODAY,
        on_click=lambda e: page.open(date_picker),  # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        style=ft.ButtonStyle(padding=10)
    )
    selected_date = ft.Text("‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô", size=13, italic=True, color=ft.Colors.GREY)

    # --- ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ö‡∏ó‡∏ó‡∏µ‡πà ---
    chapter_filter = ft.TextField(
        label="‡∏ö‡∏ó",
        width=80,
        dense=True,
        text_align="center",
        on_change=lambda e: filter_entries()
    )

    # --- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà (‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ!) ---
    add_button = ft.ElevatedButton(
        "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà",
        on_click=lambda e: add_entry(),
        style=ft.ButtonStyle(color=ft.Colors.WHITE, bgcolor=ft.Colors.BLUE)
    )

    # --- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á ---
    filter_row = ft.Row([
        search_field,
        ft.Container(width=20),
        date_button,
        selected_date,
        ft.Container(width=20),
        chapter_filter,
        ft.Container(width=20),
        add_button  # ‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ add_button ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß
    ], vertical_alignment=ft.CrossAxisAlignment.CENTER)

    # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á ---
    def filter_entries():
        query = search_field.value.lower() if search_field.value else ""
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        target_date = ""
        if hasattr(date_picker, "value") and date_picker.value:
            target_date = date_picker.value.strftime("%Y%m%d")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà
        chapter_query = chapter_filter.value.strip()
        target_chapter = int(chapter_query) if chapter_query.isdigit() else None

        page.edit_container.controls.clear()

        for row in entries:
            hanzi = row.controls[0].value.strip()
            thai = row.controls[1].value.strip()
            
            # ‡∏î‡∏∂‡∏á metadata
            entry_data = original_glossary_metadata.get(hanzi, {})

            added_at = entry_data.get("added_at", "")
            chapter_seen = entry_data.get("chapter_first_seen")

            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
            matches_search = not query or query in hanzi.lower() or query in thai.lower()
            matches_date = not target_date or target_date in added_at
            matches_chapter = target_chapter is None or chapter_seen == target_chapter

            if matches_search and matches_date and matches_chapter:
                page.edit_container.controls.append(row)

        page.update()

    # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà ---
    def add_entry(hanzi="", thai=""):
        row = ft.ResponsiveRow(
            columns=12,
            controls=[
                ft.TextField(
                    value=hanzi,
                    col={"sm": 4},
                    dense=True,
                    height=40,
                    text_size=16,
                    bgcolor=ft.Colors.GREY_100
                ),
                ft.TextField(
                    value=thai,
                    col={"sm": 7},
                    dense=True,
                    height=40,
                    text_size=16,
                    bgcolor=ft.Colors.WHITE
                ),
                ft.IconButton(
                    icon=ft.Icons.DELETE_OUTLINE,
                    on_click=lambda e: delete_entry(row),
                    tooltip="‡∏•‡∏ö",
                    icon_color=ft.Colors.RED_400
                )
            ]
        )
        entries.append(row)
        if search_field.value == "" and (not chapter_filter.value) and (not hasattr(date_picker, "value")):
            page.edit_container.controls.append(row)
        page.update()

    def delete_entry(row):
        entries.remove(row)
        page.edit_container.controls.remove(row)
        page.update()

    # --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏° ---
    for k, v in original_glossary.items():
        add_entry(k, v)

    # --- ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ---
    status_label = ft.Text("", size=14, color=ft.Colors.GREY)

    def save_clicked(e):
        new_data = {}
        errors = []
        for row in entries:
            hanzi_field = row.controls[0]
            thai_field = row.controls[1]
            hanzi = hanzi_field.value.strip()
            thai = thai_field.value.strip()
            if hanzi:
                if hanzi in new_data:
                    errors.append(f"‡∏ã‡πâ‡∏≥: {hanzi}")
                else:
                    new_data[hanzi] = thai
            elif thai:
                errors.append(f"‡∏°‡∏µ‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏à‡∏µ‡∏ô: {thai}")

        if errors:
            status_label.value = "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + "; ".join(errors)
            status_label.color = ft.Colors.RED
            page.update()
            return

        try:
            save_glossary(new_data)
            success, msg = git_commit_changes()
            status_label.value = msg
            status_label.color = ft.Colors.GREEN if success else ft.Colors.RED
        except Exception as e:
            status_label.value = f"‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {str(e)}"
            status_label.color = ft.Colors.RED

        page.update()

    save_button = ft.ElevatedButton(
        "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞ Git Commit",
        on_click=save_clicked,
        style=ft.ButtonStyle(color=ft.Colors.WHITE, bgcolor=ft.Colors.GREEN)
    )

    # --- ‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ---
    page.add(
        ft.Text("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÑ‡∏ã‡πà‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô", size=24, weight=ft.FontWeight.BOLD),
        ft.Divider(),
        filter_row,
        ft.Row([save_button]),
        status_label,
        ft.Divider(),
        ft.Text("‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏µ‡∏ô ‚Üí ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)", size=16, weight=ft.FontWeight.BOLD),
        page.edit_container
    )


# ---------------------------
# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ
# ---------------------------
if __name__ == "__main__":
    ft.app(target=main)