#!/usr/bin/env python3
"""
reprocess_all_outdated.py - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï, ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï reprocess.py)
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‚Üí ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå _updated.txt
"""

import os
import sys
import io
import json
import subprocess
import argparse
import datetime
from pathlib import Path


# ---------------------------
# ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ UTF-8 ‡∏ö‡∏ô Windows
# ---------------------------
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# ---------------------------
# Configuration
# ---------------------------
SRC_DIR = "chapters_src"
OUT_DIR = "chapters_translated"
META_DIR = os.path.join(OUT_DIR, ".meta")
GLOSSARY_FILE = "glossary.yaml"
REPORTS_DIR = "reports"

os.makedirs(REPORTS_DIR, exist_ok=True)


# ---------------------------
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Git
# ---------------------------
def is_git_repo() -> bool:
    try:
        result = subprocess.run(["git", "rev-parse", "--is-inside-work-tree"],
                                capture_output=True, text=True)
        return result.returncode == 0 and result.stdout.strip() == "true"
    except Exception:
        return False


# ---------------------------
# ‡∏î‡∏∂‡∏á commit hash ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
# ---------------------------
def get_current_commit() -> str:
    try:
        result = subprocess.run(["git", "rev-parse", "HEAD"],
                                capture_output=True, text=True)
        return result.stdout.strip() if result.returncode == 0 else "unknown"
    except Exception:
        return "unknown"


# ---------------------------
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á glossary
# ---------------------------
def has_glossary_changed_since(commit_ref: str) -> bool:
    if not commit_ref or commit_ref == "unknown":
        return True
    try:
        result = subprocess.run(
            ["git", "diff", "--name-only", commit_ref, "HEAD", GLOSSARY_FILE],
            capture_output=True, text=True
        )
        return bool(result.stdout.strip())
    except Exception as e:
        print(f"[ERROR] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git diff ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return True


# ---------------------------
# ‡πÇ‡∏´‡∏•‡∏î metadata
# ---------------------------
def load_metadata(chapter_name: str) -> dict:
    meta_path = os.path.join(META_DIR, f"{chapter_name}.json")
    if os.path.exists(meta_path):
        with open(meta_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


# ---------------------------
# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
# ---------------------------
def find_all_chapters() -> list:
    chapters = []
    src_path = Path(SRC_DIR)
    if not src_path.exists():
        print(f"[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ: {SRC_DIR}")
        return []
    for file in src_path.glob("*.txt"):
        chapter_name = file.stem
        chapters.append({"name": chapter_name, "path": str(file)})
    return sorted(chapters, key=lambda x: x["name"])


# ---------------------------
# ‡∏£‡∏±‡∏ô reprocess ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
# ---------------------------
def reprocess_single(chapter_path: str, dry_run: bool = False) -> tuple:
    try:
        if dry_run:
            print(f"[DRY-RUN] {sys.executable} reprocess.py {chapter_path}")
            return True, None, None, []

        result = subprocess.run(
            [sys.executable, "reprocess.py", chapter_path],
            capture_output=True, text=True
        )

        if result.returncode != 0:
            print(f"[ERROR] reprocess ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.stderr}")
            return False, None, None, []

        chapter_name = Path(chapter_path).stem
        old_path = os.path.join(OUT_DIR, f"{chapter_name}_translated.txt")
        new_path = os.path.join(OUT_DIR, f"{chapter_name}_translated_updated.txt")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô
        if not os.path.exists(old_path):
            print(f"[WARNING] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡πÅ‡∏õ‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {chapter_name}")
            return False, None, None, []

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå updated ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        if not os.path.exists(new_path):
            print(f"[INFO] ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {chapter_name} (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå updated)")
            return True, old_path, None, []  # new_path = None

        changes = []
        meta_path = os.path.join(META_DIR, f"{chapter_name}.json")
        if os.path.exists(meta_path):
            with open(meta_path, "r", encoding="utf-8") as f:
                meta = json.load(f)
            changes = meta.get("glossary_changes_applied", [])

        return True, old_path, new_path, changes

    except Exception as e:
        print(f"[ERROR] ‡∏£‡∏±‡∏ô reprocess ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return False, None, None, []


# ---------------------------
# ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML diff
# ---------------------------
def create_diff_html(old_text: str, new_text: str, chapter_name: str) -> str:
    from difflib import HtmlDiff
    old_lines = old_text.splitlines()
    new_lines = new_text.splitlines()
    d = HtmlDiff()
    return d.make_file(
        old_lines, new_lines,
        fromdesc=f"{chapter_name} - ‡πÄ‡∏î‡∏¥‡∏°",
        todesc=f"{chapter_name} - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï",
        context=True,
        numlines=3
    )


# ---------------------------
# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å diff report
# ---------------------------
def save_diff_report(report_data: list, output_path: str):
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    full_html = f"""<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <title>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡∏ó‡πÅ‡∏õ‡∏• - {timestamp}</title>
  <style>
    body {{ font-family: sans-serif; margin: 2rem; background: #f9f9f9; }}
    h1, h2 {{ color: #2c3e50; }}
    .summary {{ background: #e8f4fd; padding: 1.5rem; border-radius: 10px; margin-bottom: 2rem; }}
    table {{ border-collapse: collapse; width: 100%; margin: 1.5rem 0; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }}
    th, td {{ padding: 12px; text-align: left; vertical-align: top; }}
    th {{ background-color: #3498db; color: white; }}
    tr:nth-child(even) {{ background-color: #f2f2f2; }}
    ins {{ background-color: #d4edda; text-decoration: none; padding: 2px 4px; border-radius: 3px; }}
    del {{ background-color: #f8d7da; color: #721c24; text-decoration: line-through; padding: 2px 4px; border-radius: 3px; }}
    .reason {{ font-size: 0.9em; color: #666; font-style: italic; margin: 8px 0; }}
  </style>
</head>
<body>
  <h1>üìù ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡∏ó‡πÅ‡∏õ‡∏•</h1>
  <div class="summary">
    <p><strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> {timestamp}</p>
    <p>‡∏û‡∏ö <strong>{len(report_data)} ‡∏ö‡∏ó</strong> ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô <code>glossary.yaml</code></p>
  </div>
"""

    for item in report_data:
        full_html += f"<h2>üìñ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà: {item['chapter']}</h2>"
        if item["changes"]:
            full_html += f"<div class='reason'>‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: {', '.join(item['changes'])}</div>"
        full_html += item["diff_html"]

    full_html += "</body></html>"

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(full_html)
    print(f"[REPORT] üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {output_path}")


# ---------------------------
# ‚úÖ Auto Cleanup: ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô N ‡∏ß‡∏±‡∏ô
# ---------------------------
def cleanup_old_reports(keep_days: int = 30):
    now = datetime.datetime.now()
    cutoff = now - datetime.timedelta(days=keep_days)
    deleted_count = 0

    if not os.path.exists(REPORTS_DIR):
        return

    for file in os.listdir(REPORTS_DIR):
        if file.startswith("diff_report_") and file.endswith(".html"):
            path = os.path.join(REPORTS_DIR, file)
            try:
                timestamp_str = file[13:27]  # YYYYMMDD_HHMMSS
                file_time = datetime.datetime.strptime(timestamp_str, "%Y%m%d_%H%M%S")
                if file_time < cutoff:
                    os.remove(path)
                    print(f"[CLEANUP] üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤: {file}")
                    deleted_count += 1
            except Exception as e:
                print(f"[WARNING] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {file}, ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ ‚Üí {e}")
                continue

    if deleted_count > 0:
        print(f"[CLEANUP] ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {deleted_count} ‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")


# ---------------------------
# Main
# ---------------------------
def main():
    parser = argparse.ArgumentParser(description="üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏¢‡∏à‡∏≤‡∏Å glossary")
    parser.add_argument("--dry-run", action="store_true", help="‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á")
    parser.add_argument("--force", action="store_true", help="‡∏£‡∏±‡∏ô reprocess ‡∏ó‡∏∏‡∏Å‡∏ö‡∏ó ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
    args = parser.parse_args()

    if not is_git_repo():
        print("[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏û‡∏≠ git ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ git")
        exit(1)

    current_commit = get_current_commit()
    print(f"[INFO] üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà commit: {current_commit[:8]}")

    chapters = find_all_chapters()
    if not chapters:
        print("[INFO] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡πÅ‡∏õ‡∏•")
        return

    outdated = []
    updated = []
    errors = {}
    diff_report_data = []

    print(f"[INFO] ‡∏û‡∏ö {len(chapters)} ‡∏ö‡∏ó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...")

    for ch in chapters:
        chapter_name = ch["name"]
        old_trans_path = os.path.join(OUT_DIR, f"{chapter_name}_translated.txt")
        
        # ‚úÖ ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏õ‡∏•
        if not os.path.exists(old_trans_path):
            print(f"[SKIP] ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏õ‡∏•: {chapter_name}")
            continue

        meta = load_metadata(chapter_name)
        last_commit = meta.get("last_glossary_commit")
        should_update = args.force or not last_commit or has_glossary_changed_since(last_commit)

        if should_update:
            outdated.append(chapter_name)
            print(f"[üîÑ OUTDATED] {chapter_name}")

            if not args.dry_run:
                success, old_path, new_path, changes = reprocess_single(ch["path"])
                if success and new_path:  # ‚úÖ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á
                    with open(old_path, "r", encoding="utf-8") as f:
                        old_text = f.read()
                    with open(new_path, "r", encoding="utf-8") as f:
                        new_text = f.read()
                    diff_html = create_diff_html(old_text, new_text, chapter_name)
                    diff_report_data.append({
                        "chapter": chapter_name,
                        "diff_html": diff_html,
                        "changes": changes
                    })
                    updated.append(chapter_name)
                elif success:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‚Üí ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á diff
                    print(f"[‚úÖ NO CHANGE] {chapter_name}")
                    updated.append(chapter_name)
                else:
                    errors[chapter_name] = "reprocess failed or files missing"
        else:
            print(f"[‚úÖ UP-TO-DATE] {chapter_name}")

    if diff_report_data and not args.dry_run:
        report_path = f"reports/diff_report_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        save_diff_report(diff_report_data, report_path)
        cleanup_old_reports(keep_days=30)

    print("\n" + "="*60)
    print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡πÅ‡∏õ‡∏•")
    print("="*60)
    print(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(chapters)} ‡∏ö‡∏ó")
    print(f"üîÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {len(outdated)} ‡∏ö‡∏ó")
    print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(updated)} ‡∏ö‡∏ó")
    print(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {len(errors)} ‡∏ö‡∏ó")
    if diff_report_data:
        print(f"üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {report_path}")
    print("="*60)


if __name__ == "__main__":
    main()